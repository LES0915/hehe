#!/usr/bin/env python3

import rospy
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist
from detection_msgs.msg import BoundingBox, BoundingBoxes
import tf2_ros
import tf2_geometry_msgs

count = 0

# tf_buffer = tf2_ros.Buffer()
# tf_listener = tf2_ros.TransformListener(tf_buffer)

# base_frame = 'camera_link'


class PIDController:
    def __init__(self, kp, ki, kd, setpoint):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.setpoint = setpoint
        self.last_error = 0
        self.error_sum = 0

    def update(self, process_variable):
        error = self.setpoint - process_variable
        error/=500
        self.error_sum += error
        error_diff = error - self.last_error
        output = (self.kp * error) + (self.ki * self.error_sum) + \
            (self.kd * error_diff)
        self.last_error = error
        return output


class DroneController:
    def __init__(self):
        rospy.init_node('track_dock')
        self.sub = rospy.Subscriber(
            '/yolov5/detections', BoundingBoxes, self.detection_callback)
        self.pub = rospy.Publisher('/tello/cmd_vel', Twist, queue_size=1)
        self.pid_x = PIDController(kp=1.0, ki=0.01, kd=0.02, setpoint=960/2)
        self.pid_y = PIDController(kp=1.0, ki=0.01, kd=0.02, setpoint=720/2)

    def detection_callback(self, msg):
        if len(msg.bounding_boxes) == 0:
            return
        bbox = msg.bounding_boxes[0]
        rospy.loginfo(
            f'image size x = {bbox.xmax-bbox.xmin}, image size y = {bbox.ymax-bbox.ymin}')
        x = (bbox.xmax + bbox.xmin) / 2
        y = (bbox.ymax + bbox.ymin) / 2
        twist_msg = Twist()
        twist_msg.linear.x = 0.0
        twist_msg.linear.y = self.pid_x.update(x)
        twist_msg.linear.z = self.pid_y.update(y)
        twist_msg.angular.x = 0.0
        twist_msg.angular.y = 0.0
        twist_msg.angular.z = 0.0
        self.pub.publish(twist_msg)


if __name__ == '__main__':
    controller = DroneController()
    count = count+1
    rospy.loginfo('start dock tracking node')
    rospy.spin()
